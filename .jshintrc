/******************************************************************************
 *                                                                            *
 *    This file is part of RPB Calendar, a Wordpress plugin.                  *
 *    Copyright (C) 2014  Yoann Le Montagner <yo35 -at- melix.net>            *
 *                                                                            *
 *    This program is free software: you can redistribute it and/or modify    *
 *    it under the terms of the GNU General Public License as published by    *
 *    the Free Software Foundation, either version 3 of the License, or       *
 *    (at your option) any later version.                                     *
 *                                                                            *
 *    This program is distributed in the hope that it will be useful,         *
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of          *
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
 *    GNU General Public License for more details.                            *
 *                                                                            *
 *    You should have received a copy of the GNU General Public License       *
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.   *
 *                                                                            *
 ******************************************************************************/


{
	// === Enforcing options =====================================================

	"bitwise"  : true ,    // Prohibit bitwise operators (&, |, ^, etc.).
	"camelcase": true ,    // Force all variable names to use either camelCase or UPPER_CASE.
	"curly"    : true ,    // Require {} for every new block or scope.
	"eqeqeq"   : true ,    // Require triple equals, i.e. `===` and `!==`.
	"es3"      : true ,    // ECMAScript 3 compliance (useful for old browser support, e.g. IE 8/9).
	"forin"    : true ,    // Prohibit `for in` loops without `hasOwnPrototype`.
	"freeze"   : true ,    // Prohibit overwriting prototypes of native objects such as `Array`, `Date`, etc...
	"immed"    : true ,    // Require immediate invocations to be wrapped in (), e.g. `(function (foo) { ... })(bar)`.
	"latedef"  : true ,    // Prohibit variable use before definition.
	"newcap"   : true ,    // Require capitalization of all constructor functions, e.g. `new F()`.
	"noarg"    : true ,    // Prohibit use of `arguments.caller` and `arguments.callee`.
	"noempty"  : true ,    // Prohibit empty blocks.
	"nonbsp"   : true ,    // Warn about non-breaking space characters.
	"nonew"    : true ,    // Prohibit use of constructors for side-effects.
	"plusplus" : false,    // Prohibit `++` and `--`.
	"undef"    : true ,    // Require all variables be declared before they are used.
	"unused"   : true ,    // Warn when a variable is defined but not used.
	"strict"   : true ,    // Require `use strict` pragma in every file.
	"trailing" : true ,    // Prohibit trailing whitespaces.


	// === Relaxing options ======================================================

	// These options allow you to suppress certain types of warnings. Use them only
	// if you are absolutely positive that you know what you are doing.

	"asi"         : false,    // Suppress warnings about missing semicolons.
	"boss"        : false,    // Allow assignments inside if, for & while, e.g. `if (a = 10) { ... }`.
	"debug"       : false,    // Allow debugger statements, e.g. browser breakpoints.
	"eqnull"      : false,    // Tolerate use of `== null`.
	"esnext"      : false,    // Allow ECMAScript 6 features.
	"evil"        : false,    // Tolerate use of `eval`.
	"expr"        : false,    // Tolerate `ExpressionStatement` as Programs.
	"funcscope"   : false,    // Allow variables declared inside of control structures and used from the outside.
	"globalstrict": false,    // Allow global `use strict`.
	"iterator"    : false,    // Allow usage of __iterator__ property.
	"lastsemic"   : false,    // Tolerate missing semicolons for the last statement in a one-line block.
	"laxbreak"    : false,    // Tolerate unsafe line breaks, e.g. `return [\n] x` without semicolons.
	"laxcomma"    : false,    // Suppress warnings about comma-first coding style.
	"loopfunc"    : false,    // Allow functions to be defined within loops.
	"multistr"    : false,    // Tolerate multi-line strings.
	"notypeof"    : false,    // Do not care about invalid typeof operator values, e.g. `typeof a === "fuction"`.
	"proto"       : false,    // Allow usage of __proto__ property.
	"scripturl"   : false,    // Allow script-targeted URLs, e.g. `href="javascript: ... "`.
	"smarttabs"   : false,    // Tolerate mixed tabs and spaces when the latter are used for alignmnent only.
	"shadow"      : true ,    // Allow re-defining variables later in code, e.g. `var x=1; ... var x=2;`.
	"sub"         : true ,    // Allow `dict['key']` even when `dict.key` is possible.
	"supernew"    : false,    // Tolerate `new function () { ... };` and `new Object;`.
	"validthis"   : false,    // Allow `this` to be used in non-constructor functions.
	"noyield"     : false,    // Allow generator functions without `yield` statement.


	// === Environments ==========================================================

	// Enable some pre-defined global variables that are exposed by popular JavaScript libraries
	// and runtime environments such as browser or NodeJS.

	"browser"    : true ,    // Standard browser globals, e.g. `window`, `document`.
	"couch"      : false,    // Enable globals exposed by CouchDB.
	"devel"      : false,    // Allow development statements, e.g. `console.log()`.
	"dojo"       : false,    // Enable globals exposed by Dojo Toolkit.
	"jquery"     : false,    // Enable globals exposed by jQuery JavaScript library.
	"mootools"   : false,    // Enable globals exposed by MooTools JavaScript framework.
	"node"       : false,    // Enable globals available inside of the NodeJS runtime environment.
	"nonstandard": false,    // Define non-standard but widely adopted globals such as `escape` and `unescape`.
	"phantom"    : false,    // Enable globals available inside of the PhantomJS runtime environment.
	"prototypejs": false,    // Enable globals exposed by Prototype JavaScript framework.
	"rhino"      : false,    // Enable globals available inside of the Rhino runtime environment.
	"worker"     : false,    // Enable globals available inside of a Web Worker runtime environment.
	"wsh"        : false,    // Enable globals available inside of the Windows Script Host runtime environment.
	"yui"        : false,    // Enable globals exposed by YUI JavaScript framework.


	// === Coding style ==========================================================
	
	"indent"       : 4       ,    // Enforce a specific tab width.
	"quotmark"     : "single",    // Enforce consistency of quotation marks. Possible values are `true`, `"single"` and `"double"`.
	"maxparams"    : null    ,    // Maximum number of formal parameters per function.
	"maxdepth"     : null    ,    // Maximum nested block level.
	"maxstatements": null    ,    // Maximum number of statements per function.
	"maxcomplexity": null    ,    // Maximum cyclomatic complexity.
	"maxlen"       : null    ,    // Maximum length of a line.


	// === Miscellaneous =========================================================

	"maxerr": 50,    // Maximum errors before stopping.
	"predef": [      // Extra globals.
		// "exampleVar",
		// "anotherCoolGlobal"
	]
}

